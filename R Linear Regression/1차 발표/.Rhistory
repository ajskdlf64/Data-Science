# 2017년에 국내에 개봉한 10만 이상의 관객을 기록한 152개의 영화 데이터
# 자료 출처 : 영화진흥위원회에서 추출한 데이터를 바탕으로 직접 작성
# 분석 목표 : 영화 개봉 전 영화의 관객수 예측
# Name : 유니크, 영화 공식 이름
# Distributor : 배급사. 4대 메이져 배급사에서 배급한 영화 Major, 그 외의 배급사 : Minor
# Month : 영화 개봉 월
# Country : 영화 제작 국가
# Genre : 영화 장르
# Runtime : 영화 런타임
# Garde : 관람 등급
# Screen_Type : 상영하는 스크린의 타입
# Story : 영화 이야기의 원작 존재 여부
# Series : 시리즈물의 여부
# Audience_Reviews : 시사회 관객 평점
# Critic_Reviews : 시사회 평론가 평점
# Preview : 시사회 관객 수
# Screen : 스크린수
# Audience : 최종 관객 수
# 데이터 확인
library(tidyverse)
set.seed(1234)
movie <- read.csv("C:/Users/user/Desktop/학교/04. 통계자료분석실습/2차 발표/data/Movie.csv")
movie <- as.tibble(movie) %>% mutate(Name=as.character(Name),Month=as.factor(Month))
movie <- movie[sample(1:nrow(movie),nrow(movie)),]
sum(is.na(movie))
str(movie)
View(movie)
# 데이터 분리
x.id <- sample(1:nrow(movie), size=15)
df_test <- movie[x.id,]
df_train <- movie[-x.id,]
# 로그 변환
fit.1 <- lm(log(Audience,base=10) ~ . -Name, data=df_train)
summary(fit.1)
AIC(fit.1)
BIC(fit.1)
plot(fit.1,which=1)
# 로그 변환
fit.1 <- lm(log(Audience,base=10) ~ . -Name, data=df_train)
summary(fit.1)
AIC(fit.1)
BIC(fit.1)
plot(fit.1,which=1)
# 상용로그 변환
fit.2 <- lm(log(Audience,base=10) ~ . -Name, data=df_train)
summary(fit.2)
AIC(fit.2)
BIC(fit.2)
plot(fit.2,which=1)
# 자연로그 변환
fit.1 <- lm(log(Audience) ~ . -Name, data=df_train)
summary(fit.1)
AIC(fit.1)
BIC(fit.1)
plot(fit.1,which=1)
plot(fit.2,which=1)
str(Freedman) ; head(Freedman) ; summary(Freedman)
# 데이터 소개
library(tidyverse)
library(car)
str(Freedman) ; head(Freedman) ; summary(Freedman)
str(Freedman) ; head(Freedman) ; summary(Freedman)
head(Freedman)
# 결측값 제거
Freedman <- na.omit(Freedman)
# 시드 고정
set.seed(1234)
rm(list=lm())
rm(list=ls())
# 데이터 소개
library(tidyverse)
library(car)
str(Freedman) ; head(Freedman) ; summary(Freedman)
# 반응변수 : crime
# 설명변수 : population, nonwhite, density
# 결측값 제거
Freedman <- na.omit(Freedman)
# 시드 고정
set.seed(1234)
# 데이터 분할
x.id <- sample(1:nrow(Freedman), size=10)
df_1 <- Freedman[x.id,]
df_2 <- Freedman[-x.id,]
# 산점도
GGally::ggpairs(df_2)
# 회귀 모형 적합
fit <- lm(crime ~ ., data=df_2)
summary(fit)
# 등분산성 확인
plot(which=1)
# 등분산성 확인
plot(fit, which=1)
# 반응 변수 변환 여부 확인
library(MASS)
bc <- boxcox(fit)
names(bc)
bc$x[which.max(bc$y)]
# 함수 car::powerTransform()에 의한 변환 탐색
library(car)
summary(powerTransform(fit_s))
summary(powerTransform(fit))
# 반응 변수 변환 여부 확인
summary(powerTransform(fit))
# 설명 변수의 변환 여부 확인
boxTidwell(Murder~., data=df_2)
# 설명 변수의 변환 여부 확인
boxTidwell(crime~., data=df_2)
# 설명 변수의 변환 여부 확인
boxTidwell(crime~., data=df_2)
# 설명 변수의 변환 여부 확인
boxTidwell(crime~., data=df_2)
# 산점도
GGally::ggpairs(df_2)
# 모든 설명 변수에 대해 로그 변환
fit <- lm(crime ~ log(population) + log(nonwhite) + log(density), data=df_2)
suumary(fit)
summary(fit)
# 데이터 소개
library(tidyverse)
library(car)
str(Freedman) ; head(Freedman) ; summary(Freedman)
# 반응변수 : crime
# 설명변수 : population, nonwhite, density
# 결측값 제거
Freedman <- na.omit(Freedman)
# 시드 고정
set.seed(1234)
# 데이터 분할
x.id <- sample(1:nrow(Freedman), size=10)
df_1 <- Freedman[x.id,]
df_2 <- Freedman[-x.id,]
# 산점도
GGally::ggpairs(df_2)
# 회귀 모형 적합
fit <- lm(crime ~ ., data=df_2)
summary(fit)
# 반응 변수의 변환 여부 확인 -> 변환할 필요 없어 보임
summary(powerTransform(fit))
# 설명 변수의 변환 여부 확인
boxTidwell(crime~., data=df_2)
# 모든 설명 변수에 대해 로그 변환
fit.2 <- lm(crime ~ log(population) + log(nonwhite) + log(density), data=df_2)
summary(fit.2)
# 변수 선택
library(leaps)
fits <- regsubsets(crime ~ . , df_2)
fits
plot(fits)
plot(fits, scale=adjr2)
plot(fits, scale="adjr2")
plot(fits, scale="aic")
plot(fits, scale="AIC")
plot(fits, scale="Cp")
plot(fits)
plot(fits, scale="adjr2")
plot(fits, scale="Cp")
plot(fits, scale="Cp")
# 모든 설명 변수에 대해 로그 변환
fit.2 <- lm(crime ~ log(population) + log(nonwhite) + log(density), data=df_2)
summary(fit.2)
# 산점도
GGally::ggpairs(df_2)
ggplot(df_2, aes(x=population,y=crime)) + geom_point()
# population의 이상값 제거
ggplot(df_2, aes(x=population,y=crime)) + geom_point()
df_2 <- filter(df_2, population<3000)
# nonwhite의 이상값 제거
ggplot(df_2, aes(x=nonwhite,y=crime)) + geom_point()
# population의 이상값 제거
ggplot(df_2, aes(x=population,y=crime)) + geom_point()
# nonwhite의 이상값 제거
ggplot(df_2, aes(x=nonwhite,y=crime)) + geom_point()
df_2 <- filter(df_2, nonwhite<40)
# density의 이상값 제거
ggplot(df_2, aes(x=denstiy,y=crime)) + geom_point()
# density의 이상값 제거
ggplot(df_2, aes(x=density,y=crime)) + geom_point()
df_2 <- filter(df_2, density<2500)
MASS::ggpairs(df_2)
GGally::ggpairs(df_2)
fit.3 <- lm(crime ~ ., df_2)
summary(fit.3)
boxTidwell(crime~., data=df_2)
summary(fit.3)
# 산점도
GGally::ggpairs(df_2)
GGally::ggpairs(df_2)
# 데이터 소개
library(tidyverse)
library(car)
str(Freedman) ; head(Freedman) ; summary(Freedman)
# 반응변수 : crime
# 설명변수 : population, nonwhite, density
# 결측값 제거
Freedman <- na.omit(Freedman)
# 시드 고정
set.seed(1234)
# 데이터 분할
x.id <- sample(1:nrow(Freedman), size=10)
df_1 <- Freedman[x.id,]
df_2 <- Freedman[-x.id,]
# 산점도
GGally::ggpairs(df_2)
# 데이터 소개
library(tidyverse)
library(car)
str(Freedman) ; head(Freedman) ; summary(Freedman)
# 반응변수 : crime
# 설명변수 : population, nonwhite, density
# 결측값 제거
Freedman <- na.omit(Freedman)
# 시드 고정
set.seed(1234)
# 데이터 분할
x.id <- sample(1:nrow(Freedman), size=10)
df_1 <- Freedman[x.id,]
df_2 <- Freedman[-x.id,]
# 산점도
GGally::ggpairs(df_2)
# population의 이상값 제거
ggplot(df_2, aes(x=population,y=crime)) + geom_point()
df_2 <- filter(df_2, population<3000)
# nonwhite의 이상값 제거
ggplot(df_2, aes(x=nonwhite,y=crime)) + geom_point()
df_2 <- filter(df_2, nonwhite<40)
# density의 이상값 제거
ggplot(df_2, aes(x=density,y=crime)) + geom_point()
df_2 <- filter(df_2, density<2500)
GGally::ggpairs(df_2)
fit.3 <- lm(crime ~ ., df_2)
summary(fit.3)
# 데이터 소개
library(tidyverse)
library(car)
str(Freedman) ; head(Freedman) ; summary(Freedman)
# 반응변수 : crime
# 설명변수 : population, nonwhite, density
# 결측값 제거
Freedman <- na.omit(Freedman)
# 시드 고정
set.seed(1234)
# 데이터 분할
x.id <- sample(1:nrow(Freedman), size=10)
df_1 <- Freedman[x.id,]
df_2 <- Freedman[-x.id,]
# 산점도
GGally::ggpairs(df_2)
# 회귀 모형 적합
fit <- lm(crime ~ ., data=df_2)
summary(fit)
# 등분산성 확인
plot(fit, which=1)
# 반응 변수의 변환 여부 확인 -> 변환할 필요 없어 보임
summary(powerTransform(fit))
# 설명 변수의 변환 여부 확인
boxTidwell(crime~., data=df_2)
# 모든 설명 변수에 대해 로그 변환
fit.2 <- lm(crime ~ log(population) + log(nonwhite) + log(density), data=df_2)
summary(fit.2)
# population의 이상값 제거
ggplot(df_2, aes(x=population,y=crime)) + geom_point()
df_2 <- filter(df_2, population<3000)
# nonwhite의 이상값 제거
ggplot(df_2, aes(x=nonwhite,y=crime)) + geom_point()
df_2 <- filter(df_2, nonwhite<40)
# density의 이상값 제거
ggplot(df_2, aes(x=density,y=crime)) + geom_point()
df_2 <- filter(df_2, density<2500)
GGally::ggpairs(df_2)
fit.3 <- lm(crime ~ ., df_2)
summary(fit.3)
fit.4 <- lm(crime ~ log(population) + log(nonwhite) + log(density), data=df_2)
summary(fit.4)
GGally::ggpairs(df_2)
fit.3 <- lm(crime ~ ., df_2)
summary(fit.3)
# 데이터 소개
library(tidyverse)
library(car)
str(Highway1) ; head(Highway1) ; summary(Highway1)
# 범주형 변수 변환
Highway1 <- Highway1 %>% mutate(lwid=cut(lwid, breaks=c(0,11,12,13), labels=c("small","middle","large")),
lwid=relvel(lwid,ref="middle"))
# 범주형 변수 변환
Highway1 <- Highway1 %>% mutate(lwid=cut(lwid, breaks=c(0,11,12,13), labels=c("small","middle","large")),
lwid=relevel(lwid,ref="middle"))
# 시드 고정 및 데이터 셔플
set.seed(1234)
# 범주형 변수 변환
Highway11 <- Highway1 %>% mutate(lwid=cut(lwid, breaks=c(0,11,12,13), labels=c("small","middle","large")),
lwid=relevel(lwid,ref="middle"))
# 시드 고정 및 데이터 셔플
set.seed(1234)
Highway1_R <- Highway1[sample(1:nrow(Highway11),nrow(Highway11)),]
# 데이터 분할
x.id <- sample(1:nrow(Highway1_R), size=5)
Highway.test <- Highway1_R[x.id,]
Highway.train <- Highway1_R[-x.id,]
# 회귀 모델 적합
fit <- lm(rate ~ ., date=Highway.train)
summary(fit)
# 반응변수의 산점도
GGally::ggpairs(Highway.train, columns=c("rate"))
summary(fit)
# 회귀 모델 적합
fit <- lm(rate ~ ., date=Highway.train)
# 회귀 모델 적합
fit <- lm(rate ~ ., data=Highway.train)
summary(fit)
plot(fit, which=1)
fit.log <- lm(log(rate) ~ ., data=Highway.train)
plot(fit.log, which=1)
plot(fit, which=1)
fit.log <- lm(log(rate) ~ ., data=Highway.train)
plot(fit.log, which=1)
log(100000000, base=10)
# 데이터 분리
x.id <- sample(1:nrow(movie), size=nrow(movie)*0.2)
df_test <- movie[x.id,]
df_train <- movie[-x.id,]
# 데이터 확인
library(tidyverse)
set.seed(1234)
movie <- read.csv("C:/Users/user/Desktop/학교/04. 통계자료분석실습/2차 발표/data/Movie.csv")
movie <- as.tibble(movie) %>% mutate(Name=as.character(Name),Month=as.factor(Month))
movie <- movie[sample(1:nrow(movie),nrow(movie)),]
sum(is.na(movie))
str(movie)
# 데이터 분리
x.id <- sample(1:nrow(movie), size=nrow(movie)*0.2)
df_test <- movie[x.id,]
df_train <- movie[-x.id,]
# Distributor
df_train %>% group_by(Distributor) %>%
summarise(n=n()) %>%
ggplot(aes(x=Distributor,y=n,fill=Distributor)) +
geom_bar(stat="identity") +
geom_text(aes(label=n),size=10) +
labs(x="배급사",y="작품수")
df_train %>% ggplot(aes(x=Audience, fill=Distributor)) +
geom_histogram(bins=20, alpha=0.6)
# Month
df_train %>% group_by(Month) %>%
summarise(n=n()) %>%
ggplot(aes(x=Month,y=n,fill=Month)) +
geom_bar(stat="identity") +
geom_text(aes(label=n),size=5) +
labs(x="개봉시기",y="작품수")
df_train %>% ggplot(aes(x=Month, y=Audience)) +
geom_boxplot() +
labs(x="개봉 시기", y="관객 수")
# Country
df_train %>% group_by(Country) %>%
summarise(n=n()) %>%
ggplot(aes(x=Country,y=n,fill=Country)) +
geom_bar(stat="identity") +
geom_text(aes(label=n),size=5) +
labs(x="제작국가",y="작품수")
df_train %>% ggplot(aes(x=Audience, fill=Country)) +
geom_histogram(bins=20, alpha=0.6) +
labs(x="제작국가",y="작품수")
# Genre
df_train %>% group_by(Genre) %>%
summarise(n=n()) %>%
ggplot(aes(x=Genre,y=n,fill=Genre)) +
geom_bar(stat="identity") +
geom_text(aes(label=n),size=5) +
labs(x="장르",y="작품수")
# Runtime
df_train %>% ggplot(aes(x=Runtime)) +
geom_histogram(bins=20,fill="steelblue") +
labs(x="상영시간",y="작품수")
df_train %>% ggplot(aes(x=Runtime, y=Audience)) +
geom_point(size=3) +
geom_smooth(aes(col="loess"),se=FALSE,size=2) +
geom_smooth(aes(col="lm"),se=FALSE,method="lm",size=2) +
geom_smooth(data=filter(df_train,Name!="블레이드 러너 2049"),aes(col="lm for Outlier"),se=FALSE,method="lm",size=2) +
geom_text(data=filter(df_train,Name=="블레이드 러너 2049"),aes(label=Name),size=5,col="steelblue",nudge_x=-5, nudge_y=-500000) +
labs(col="method")
# Garde
df_train %>% group_by(Grade) %>%
summarise(n=n()) %>%
ggplot(aes(x=Grade,y=n,fill=Grade)) +
geom_bar(stat="identity") +
geom_text(aes(label=n),size=10) +
labs(x="상영등급",y="작품수")
df_train %>% ggplot(aes(x=Audience)) +
geom_density() +
facet_wrap(~Grade, ncol=1)
# Screen_Type
df_train %>% group_by(Screen_Type) %>%
summarise(n=n()) %>%
ggplot(aes(x=Screen_Type,y=n,fill=Screen_Type)) +
geom_bar(stat="identity") +
geom_text(aes(label=n),size=10) +
labs(x="스크린 타입",y="작품수")
df_train %>% ggplot(aes(x=Screen, y=Audience, col=Screen_Type)) +
geom_point(size=5)
# Story
df_train %>% group_by(Story) %>%
summarise(n=n()) %>%
ggplot(aes(x=Story,y=n,fill=Story)) +
geom_bar(stat="identity") +
geom_text(aes(label=n),size=10) +
labs(x="원작 혹은 사실의 존재 여부",y="작품수")
df_train %>% ggplot(aes(x=Audience, fill=Story)) +
geom_histogram(bins=20, alpha=0.6) +
labs(x="원작 혹은 사실의 존재 여부",y="작품수")
# 회귀모형 적합
fit <- lm(Audience ~ . -Name, data=df_train)
summary(fit)
AIC(fit)
BIC(fit)
plot(fit, which=1)
# 반응변수 변환 확인
library(car)
summary(powerTransform(fit))
# 자연로그 변환
fit.1 <- lm(log(Audience) ~ . -Name, data=df_train)
summary(fit.1)
AIC(fit.1)
BIC(fit.1)
plot(fit.1,which=1)
# 상용로그 변환
fit.2 <- lm(log(Audience,base=10) ~ . -Name, data=df_train)
summary(fit.2)
AIC(fit.2)
BIC(fit.2)
plot(fit.2,which=1)
summary(powerTransform(fit.2))
# 이상값 확인
library(car)
influencePlot(fit.2)
df_train[22,]
df_train %>% ggplot(aes(x=Screen,y=Audience,col=Distributor)) +
geom_point(size=2) +
geom_text(data=filter(df_train,Screen>2000,Audience<10000000),aes(label=Name),col="black",size=7,nudge_x=-100,nudge_y=-500000)
# 모형 선택 기준에 따른 변수 선택
library(leaps)
fits <- regsubsets(log(Audience,base=10) ~ . -Name, df_train)
plot(fits, main="BIC")
plot(fits, scale="adjr2", main="adjr2")
plot(fits, scale="Cp", main="Cp")
# StepAIC
step(fit.2, direction="both", trace=FALSE)
step(fit.2, k=log(nrow(df_train)),trace=FALSE)
# 잠정 모형
fit.2.1 <- lm(log(Audience, base = 10) ~ Runtime + Grade + Screen_Type + Critic_Reviews + Screen, data=df_train)
summary(fit.2.1)
AIC(fit.2.1)
BIC(fit.2.1)
fit.2.2 <- lm(log(Audience, base = 10) ~ Critic_Reviews + Screen, data=df_train)
summary(fit.2.2)
AIC(fit.2.2)
# 데이터 소개
library(tidyverse)
library(car)
str(Highway1) ; head(Highway1) ; summary(Highway1)
